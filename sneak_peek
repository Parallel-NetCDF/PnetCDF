------------------------------------------------------------------------------
This is essentially a placeholder for the next release note ...
------------------------------------------------------------------------------

  o New features
    * NetCDF4 format classic mode support via netcdf. 
    * Burst Buffering is now available. Burst buffer driver is an I/O driver
      that implements a log-based I/O aggregation for write requests with the
      present of burst buffer storage devices. The design is to save write
      requests in burst buffers and later flush the saved requests to the
      destination file system. See doc/README.burst_buffering for more detailed
      description.

  o New optimization
    * Internal memory management for nonblocking APIs has been improved further
      to reduce memory footprint. See r3763.
    * Both blocking and nonblocking varn APIs have been improved for better
      performance and reduced memory footprint. See r3747-r3750.
    * Prior to this release, when buftype in flexible APIs indicates a
      noncontiguous layout in user buffer, PnetCDF packs the user buffer into
      a contiguous buffer allocated internally, which will later be used in
      MPI-IO calls. To reduce memory footprint, this release avoids the
      additional memory allocation and directly uses the user buffer in MPI-IO
      calls when byte-swap and type-conversion are not required. See r3722 and
      r3723.

  o New Limitations
    * none

  o Update configure options
    * The default option for relax-coord-bound is changed to "enable", in
      accord with NetCDF 4.7.0. Users may use --disable-relax-coord-bound to
      disable this setting at configure time or at run time by setting the
      environment variable PNETCDF_RELAX_COORD_BOUND. See section "New run-time
      environment variables" below for more information.
    * Option in-place byte-swap is expanded into the followings.
      --enable-in-place-swap : perform byte swap on user I/O buffers whenever
      possible. This option results in the least amount of internal memory
      usage. However, if an immutable user buffer is used, segmentation fault
      may occur when byte swap is performed on user buffer in place.
      --disable-in-place-swap : when byte swap is required, an internal memory
      space will be allocated for byte swap without altering the contents of
      user buffer. This option will increase internal memory footprint. The
      default (neither the above option is used at the command line): an
      internal buffer is allocated for byte swap only when the I/O request size
      is less than 4 KiB. For larger requests, user buffers are used for
      in-place byte swap.
      The mode can also be changed at the run time by setting the PnetCDF hint
      nc_in_place_swap. See New hints below for more info.
      Note -in-place-swap option only affect applications running on Little
      Endian machines, as no byte swap is necessary on Big Endian machines.
    * Enable netcdf4 support.
      --enable-netcdf4 : enable NetCDF4 format classic mode support
      --with-hdf5=<HDF5 install path> : set HDF5 install path
      --with-netcdf=<NetCDF install path> : set NetCDF install path

  o New constants
    * none

  o New APIs
    * ncmpi_flush() flushes data buffered by PnetCDF to the destination file
      system. When using the burst buffers, the data cached in the burst
      buffers will be flushed.

  o API syntax changes
    * none

  o API semantics updates
    * The default setting for checking the coordinate bound is changed to the
      more relaxed check. Users can still change this checking at run time by
      setting the environment variable PNETCDF_RELAX_COORD_BOUND. See section
      of "New run-time environment variables" below for more information.
    * ncmpi_put_vard and ncmpi_get_vard APIs
      1. Now allow to write and read two or more variables in a single call to
         vard APIs. In this case, argument varid will be the ID of first
         variable. Argument filetype should be constructed by using the
         relative distance between any two successive variables. See example
         program examples/C/vard_mvars.c.
      2. When argument filetype is MPI_DATATYPE_NULL, the request is considered
         a zero-length request.
      3. Limitation of vard APIs: The element data type of filetype must
         conform with the variable external NC data type. The element data
         types of all variables accessed in filetype must be the same.
         Otherwise, NC_EMULTITYPES will be returned.
      4. buftype must contain only one element data type. Otherwise
         NC_EMULTITYPES will be returned.

  o New error code precedence
    * none

  o Updated error strings
    * none

  o New error code
    * NC_EFLUSHED when calling ncmpi_cancel() to cancel non-blocking requests
      but the requests have already flushed.
    * NC_EBADLOG when the log files stored in the burst buffers are corrupted.

  o New PnetCDF hint
    * nc_in_place_swap -- to enable or disable in-place byte swap on Little
      Endian architectures. The default mode is auto. See in-place byte-swap
      option above for descriptions of the three modes. Below is an example
      that changes the mode set at the configure time to "enable", by setting
      the environment variable PNETCDF_HINTS with command:
          export PNETCDF_HINTS="nc_in_place_swap=enable"
    * nc_burst_buf -- to use the burst buffering feature. The default is 
      disable. To enable at the run time, one can add the hint to environment
      variable PNETCDF_HINTS, for example,
          export PNETCDF_HINTS="nc_burst_buf=enable"
    * nc_burst_buf_dirname -- Name of directory on the burst buffer where the
      internal log files will be stored. This is usually set to the path where
      burst buffer is mounted. The default path is the same directory of the
      output file.
    * nc_burst_buf_del_on_close -- Whether the log files stored in burst buffer
      should be deleted when closing the NetCDF file. The default is enable. To
      disable at the run time, one can add the hint to environment variable
      PNETCDF_HINTS, for example,
          export PNETCDF_HINTS="nc_burst_buf_del_on_close=disable"
      Note that on some systems, e.g. DataWarp, the files stored in burst
      buffers are purged when the user job is completed. In this case, users
      who wish to keep the files to be used for other jobs must refer to the
      burst buffer user guide for such setting. For DataWarp on Cori @NERSC,
      the settings are described in
      http://www.nersc.gov/users/computational-systems/cori/burst-buffer/example-batch-scripts/
    * nc_burst_buf_flush_buffer_size -- Amount of memory that can be used to 
      flush the data stored in burst buffer. The unit is in bytes. 0 means
      unlimited. Users are suggested to use a number that is at least the size
      of largest individual requests. The default is unlimited.

  o New run-time environment variables
    * PNETCDF_RELAX_COORD_BOUND environment variable can be set to 0 to disable
      or 1 to enable the more relaxed boundary check for argument start. Prior
      to version 1.10.0, the default behavior is to use a strict boundary
      check, i.e. error code NC_EINVALCOORDS will be thrown when the value of
      start is larger than or equal to the defined dimension size.

  o Build recipes
    * doc/README.burst_buffering is added to describe the usage of the new
      feature of burst buffering.
    * doc/README.IBM is revised as the compiler behavior has changed on BGQ
      since the release of 1.9.0.
    * doc/README.CRAY is revised as the compiler behavior has changed on CRAY
      since the release of 1.9.0.
    * doc/README.Ubuntu is revised and the fix of adding LDFLAGS is no longer
      necessary.

  o New/updated utility program
    * ncvalidator adds a new option -t to turn on tracing mode which prints all
      successfully validated metadata till the first error encountered.
    * ncvalidator adds a check to detect whether there are two or more
      unlimited dimensions defined in the file and, if yes, reports error code
      NC_EUNLIMIT.

  o Other updates:
    * Inter-library dependencies among C, C++ and Fortran have been updated to
      follow automake user guide: add FLIBS and FCLIBS to _LIBADD.
    * Move the memory allocation trace feature out of --enable-debug into the
      new configure option --enable-profiling. By default, this is disabled.
    * Add a check for NC_EUNLIMIT in API ncmpi_open to detect whether two or
      more unlimited dimensions are defined in a corrupted file.

  o Bug fixes
    * Fix type_create_subarray64() for case when some dimensions of the global
      array is larger than 4G and oldtype is not MPI_BYTE. See r3779. Without
      this fix, test/largefile/large_var.c will fail. Note prior to 1.9.1,
      type_create_subarray64() is always called with oldtype being MPI_BYTE.
    * Fix configure-time bug that configure fails to recognize the compilers
      with full path names set in the environment variable MPICC, MPICXX,
      MPIF77, or MPI_F90. See Ticket #35 for bug report and r3740 for fix.
    * Fix the bug that writing scalar attributes of type NF_INT64 was
      mistakenly casted to NF_INT. See r3730.
    * Fix test/testcases/erange_fill.m4 for the case of NC_LONG data type.
      NC_LONG is synonym of NC_INT. When setting fill value for variables of
      type NC_LONG, the user buffer must be of type int (internal). See r3726.
    * Fix the calculation of new record number in put_vard API. Thanks to
      Jim Edwards. See r3675.
    * Fix the calculation of growing size of nonblocking request queues to
      include the number of records of a record variable, as such request is
      split into multiple additional requests, one for each record. See r3651.
    * Remove freeing name object because NC_ENULLPAD is not a fatal error. See
      r3644. This bug only appears when --enable-null-byte-header-padding is
      set at configure time and opening files whose headers are not padded with
      null bytes.
    * Member "value" of NC_dimarray, NC_attrarray, and NC_vararray can still be
      NULL when a corrupted tag of NC_DIMENSION, NC_ATTRIBUTE, or NC_VARIABLE
      is read from files. Add a check against NULL before freeing it. This bug
      only appears when reading files with corrupted NC tags. See r3645.

  o New example programs
    * example/C/vard_mvars.c shows an example of using a single vard API call
      to write or read two variables.
    * example/burst_buffer/create_open.c shows an example of creating and
      opening a NetCDF file on burst buffer.
    * example/burst_buffer/nonblocking.c shows an example of using non-blocking
      APIs when burst buffering is enabled.

  o New programs for I/O benchmarks
    * none

  o New test program
    * test/burst_buffer/bb_bsize.c
    * test/burst_buffer/bb_hints.c
    * test/burst_buffer/bb_many_reqs.c
    * test/burst_buffer/bb_nonblocking.c
    * test/burst_buffer/highdim.c
    * test/burst_buffer/log.c
    * test/testcases/test_fillvalue.c - tests PnetCDF allows to put attribute
      _FillValue for global variable and for non-global variable, requires the
      data type of attribute _FillValue be the same as the variable's.
    * test/F90/test_attr_int64.f90 - tests the bug fixed in r3730 that
      nf90mpi_put_att API writes a scalar attribute of type NF90_INT64 that
      was mistakenly casted to NF90_INT.
    * test/testcase/test_vard_rec.c - tests ncmpi_put_vard APIs for writing a
      record variable with one record at a time. This is to test the fix to
      bug reported by Jim Edwards in r3675.
    * test/nonblocking/large_num_reqs.c - tests large number of nonblocking put
      and get requests (larger than NC_REQUEST_CHUNK, the constant used to grow
      the internal queues that store the nonblocking put and get requests. This
      is to test bug fix in r3651.
    * test/testcases/tst_def_var_fill.c - tests API ncmpi_def_var_fill and
      verifies fill values when fill mode is turned on and off.
    * src/utils/ncvalidator/tst_open.c - tests API ncmpi_open against corrupted
      files and checks expected error codes.
    * test/nc4/interoperability_rd.m4 - test whether NetCDF4 file written using NetCDF can be read by PnetCDF
    * test/nc4/interoperability_wr.m4 - test whether NetCDF4 file written using PnetCDF can be read by NetCDF

  o Conformity with NetCDF library
    * NetCDF allows to put attribute _FillValue of any NC data type to the
      global variable, NC_GLOBAL. PnetCDF conforms with this behavior.
    * For non-global variables, NetCDF treats the classic and HDF5 files
      differently. For classic files, it allows to create attribute _FillValue
      of a data type that is different from the variable's. For HDF5 files, the
      data type of attribute _FillValue must be the same as the variable.
      PnetCDF requires the data type of attribute _FillValue be the same as
      the variable's.
    * NetCDF allow data operation in define mode and vice-versa in NetCDF4 format. PnetCDF does not.

  o Conflict with NetCDF library
    * none

  o Issues related to MPI library vendors:
    * none

  o Issues related to Darshan library:
    * none

  o Clarifications
    * none

