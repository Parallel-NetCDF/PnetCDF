name: Mac OSX with MPICH

on:
  push:
    branches: [ master, test_github_actions ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.1'
      - '**/*.jpg'
      - '**/*.png'
      - 'docs/*'
      - 'test/test_installed/*'
  pull_request:
    branches: [ master, test_github_actions ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.1'
      - '**/*.jpg'
      - '**/*.png'
      - 'docs/*'
      - 'test/test_installed/*'

env:
   MPICH_VERSION: 4.2.0

jobs:
    build:
      runs-on: macos-latest
      timeout-minutes: 60
      steps:
        - uses: actions/checkout@v4
        - name: Set up dependencies
          run: |
            brew install gcc
            which gcc
            gcc --version
            ls -l /usr/local/bin/gfortran*
            version=12
            ln -fs /usr/local/bin/gfortran-${version} /usr/local/bin/gfortran
            ln -fs /usr/local/bin/gcc-${version} /usr/local/bin/gcc
            ln -fs /usr/local/bin/g++-${version} /usr/local/bin/g++
            # link lib dir for previous GCC versions to avoid missing .dylib issues
            for (( i=12; i>4; i-- ))
            do
              gcc_lib_path="/usr/local/opt/gcc/lib/gcc/$i"
              if [ -d $gcc_lib_path ]; then
                echo "found $gcc_lib_path"
                for (( j=$i; j>4; j-- ))
                do
                  ln -fs /usr/local/opt/gcc/lib/gcc/$i /usr/local/opt/gcc/lib/gcc/$j
                done
                break
              fi
            done
            which gfortran
            gfortran --version
            brew install automake autoconf libtool m4
        - name: Build MPICH
          run: |
            cd ${GITHUB_WORKSPACE}
            rm -rf MPICH ; mkdir MPICH ; cd MPICH
            wget -q https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz
            gzip -dc mpich-${MPICH_VERSION}.tar.gz | tar -xf -
            cd mpich-${MPICH_VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/MPICH \
                        --silent \
                        --enable-romio \
                        --with-file-system=ufs \
                        --with-device=ch3:sock \
                        CC=gcc \
                        FC=gfortran \
                        FFLAGS=-fallow-argument-mismatch \
                        FCFLAGS=-fallow-argument-mismatch
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s -j 8 distclean >> qout 2>&1
        - name: Build PnetCDF
          run: |
            cd ${GITHUB_WORKSPACE}
            autoreconf -i
            mkdir -p pnetcdf_output
            ./configure --enable-option-checking=fatal \
                        --enable-profiling \
                        pnc_ac_debug=yes \
                        --enable-burst_buffering \
                        --enable-subfiling \
                        --enable-shared \
                        --enable-thread-safe \
                        --with-pthread \
                        --with-mpi=${GITHUB_WORKSPACE}/MPICH \
                        TESTOUTDIR=${GITHUB_WORKSPACE}/pnetcdf_output
            make -j 8 tests
        - name: Print config.log
          if: ${{ always() }}
          run: |
            cat ${GITHUB_WORKSPACE}/config.log
        - name: make check
          run: |
            cd ${GITHUB_WORKSPACE}
            make check
        - name: Print test log files
          if: ${{ always() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            fname=`find src test examples benchmarks -type f -name "*.log"`
            for f in $fname ; do \
               bname=`basename $f` ; \
               if test "x$bname" != xconfig.log ; then \
                  echo "-------- dump $f ----------------------------" ; \
                  cat $f ; \
               fi ; \
            done
        - name: make ptests
          run: |
            cd ${GITHUB_WORKSPACE}
            make ptests
        - name: make distcheck
          run: |
            cd ${GITHUB_WORKSPACE}
            make -j 8 distcheck DISTCHECK_CONFIGURE_FLAGS="--silent --with-mpi=${GITHUB_WORKSPACE}/MPICH"
        - name: Cleanup
          if: ${{ always() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            make -s distclean
            rm -rf ${GITHUB_WORKSPACE}/pnetcdf_output
            rm -rf ${GITHUB_WORKSPACE}/MPICH

