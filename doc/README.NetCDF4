#
# Copyright (C) 2018, Northwestern University and Argonne National Laboratory
# See COPYRIGHT notice in top-level directory.
#
# $Id$

-----------------------------------------------------------------------------
 Accessing NetCDF 4 file with PnetCDF
-----------------------------------------------------------------------------

Application can access NetCDF 4 formated file written in classic model
using the PnetCDF library. The NetCDF 4 driver in PnetCDF is a wrapper of the
NetCDF Library. It handles API calls by calling corresponding NetCDF APIs. It
allow existing PnetCDF program to read/write NetCDF 4 format with minor
changes.


-----------------------------------------------------------------------------
 Build PnetCDF with NetCDF 4 support
-----------------------------------------------------------------------------

To build PnetCDF with NetCDF 4 support, set "--enable-netcdf4"
option at configure time.
As the NetCDF 4 driver is a wrapper of the NetCDF library. A working NetCDF
and HDF5 library that support parallel I/O and NetCDF 4 is needed. used
--with-netcdf and --with-hdf5 configure arguments to set path to NetCDF and
HDF5 library.

./configure --prefix=/path/to/install --enable-netcdf4 \
            --with-netcdf=<Path to NetCDF installation> \
            --with-hdf5=<Path to HDF5 installation> \

-----------------------------------------------------------------------------
 Accessing NetCDF 4 file
-----------------------------------------------------------------------------

To create/open NetCDF 4 files, set the flag NC_NETCDF4 in cmode to
ncmpi_create/ncmpi_open.

ncmpi_create(<Comm>, <Path>, NC_NETCDF4, <MPI_Info>, &ncid);

NetCDF 4 format can also be made default by setting default format to
NC_FORMAT_NETCDF4. In such case, NC_NETCDF4 flag is not needed in
ncmpi_create/ncmpi_open.

ncmpi_set_default_format(NC_FORMAT_NETCDF4, NULL);

-----------------------------------------------------------------------------
 Known Problems
-----------------------------------------------------------------------------
While we try to support as many NetCDF 4 and PnetCDF feature under NetCDF 4
format. Some feature is not supported due to different set of API available
on NetCDF and PnetCDF that are hard to translate. Some behaviors can change
due to different semantic used by PnetCDF and NetCDF. Here's a list of known
issues based on NetCDF 4.6.2-development and HDF5 1.10.2:

1. Vard and varn API is not supported. NetCDF does not have these 2 set of
   APIs.
   NetCDF does not have any APIs that allow accessing the file directly by a
   file type. It is not possible to implement vard using the NetCDF interface.
   NetCDF does not have a varn API. A potential solution to this is to
   translate it into multiple vara calls. However, since the number of function
   calls mush match under collective mode. It does not work under collective
   mode. As there is currently no efficient solution to support varn, we don't
   support varn at this time.
2. Classic model only. PnetCDF only support NetCDF 4 format in classic model.
   Advanced features such as multiple record dimension is not supported.
   Due to limitations of existing PnetCDF API interface. The APIs must be
   changed significantly to make those advanced features available.
   The NetCDF 4 driver is implemented under the classic model assumption.
   If the application access files in non=classic model, the behavior
   is undefined.
3. Collective API call should not have 0 size on part of processes.
   Due to the behavior of NetCDF library. When some processes participating a
   collective operation have nothing to write, the program may hang.
4. Put API should not be called with nothing to write (count set to 0).
   Some version of NetCDF/HDF5 library will abort if zero size is detected.
5. Collective operation does not allow calling different type of API from
   different processes. It is a limitation of the NetCDF library.




